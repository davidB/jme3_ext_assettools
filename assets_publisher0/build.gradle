buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
		classpath 'net.alchim31.gradle:gradle-jme3_ext_assettools-plugin:0.1.0'
		classpath 'de.undercouch:gradle-download-task:1.1'
	}
}

apply plugin: 'eclipse'

group = "net.alchim31.assets"
version = "0.1.0"
def description = 'Assets packaged for jme3 from various places'



def v_jme = '3.0.10'

subprojects {
	apply plugin: 'download-task'
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'

	group = "net.alchim31.assets"
	version = "0.1.0"

	repositories {
		jcenter()
		maven { url "http://updates.jmonkeyengine.org/maven/"}
		maven { url "http://dl.bintray.com/davidb/jme3stuff" }
		mavenLocal()
	}

	configurations {
			assets
	}
	dependencies {
		compile "com.jme3:jme3-core:${v_jme}"
	}

  // Define a new property
  ext.modelName = project.name
	ext.archivePath = ''
	ext.modelPathInArchive = "${modelName}.obj"
	ext.modelPathInAssetCP = null
	ext.unarchiveDir = "${buildDir}/unarchive/"
	ext.modelScale = 1.0

	task unarchive(type: Copy) {
		from {zipTree(archivePath)}
		into {unarchiveDir}
	}

	task convertToLowercase(type : Copy) {
		from unarchiveDir
		exclude { it.getName().toLowerCase() == it.getName() }
		rename { it.toLowerCase()	}
		into unarchiveDir
	}

	task convertToDDS(type : Copy) {
		from unarchiveDir
		into unarchiveDir
		include('**/*.TGA', '**/*.tga')
		//include('**/*.PNG', '**/*.png')
		eachFile { FileCopyDetails fcd ->
			println "convert to dds ${fcd}"
			//on windows:
			//commandLine 'cmd', '/c', 'nvcompress'
			def cmd = ["nvcompress"]
			if (fcd.name.indexOf("_ddn.") > 0) cmd += "-normal"
			cmd += fcd.file.absolutePath
			//println "convert to dds >>> ${fcd.file} >>  ${fcd.getSourceName()} >>  ${fcd.name}"
			fcd.name = fcd.name.substring(0, fcd.name.lastIndexOf(".")) + ".dds"
			fcd.name = fcd.name.toLowerCase()
			//def proc  = "nvcompress ${options} ${f}".execute();
			//proc.waitFor();
			//println "return code: ${ proc.exitValue()}"
			exec {
				commandLine cmd
			}
			fcd.exclude()
		}
	}

//  task convertToDDS {
//     ext.srcFiles = fileTree(dir: unarchiveDir, include: '**/*.tga')
//     inputs.files srcFiles
//     //outputs.files srcFiles.collect{}
//     doLast {
// 			srcFiles.each { f ->
//        // only if more recent
// 				println "convert to dds ${f}"
// 				//on windows:
// 				//commandLine 'cmd', '/c', 'nvcompress'
// 				def cmd = ["nvcompress"]
// 				if (f.getName().indexOf("_ddn.tga") > 0) cmd += "-normal"
// 				cmd += f.getAbsolutePath()
// 				//def proc  = "nvcompress ${options} ${f}".execute();
// 				//proc.waitFor();
// 				//println "return code: ${ proc.exitValue()}"
// 				exec {
//     			commandLine cmd
// 				}
//       }
//     }
// 	}

	task convertToJ3O(type: jme3_ext_assettools.ModelExtractorTask) {
		rpath = {modelPathInAssetCP}
		file = {"${unarchiveDir}/${modelPathInArchive}"}
		assetClassPath = configurations.assets
		outBaseName = {modelName}
		prefixTexture = true
		scale = {modelScale}
		//task.assetClassLoader = Thread.currentThread().getContextClassLoader()
		//task.outBaseName = ext.modelName
		//task.outDir = project.file("build/test-extract")
		doFirst {
			//jme3_ext_assettools.MTLLoaderExt.preferedExtension = new String[]{"dds", "png", "tga"}
		}
	}

	task convert{
		dependsOn convertToDDS, convertToJ3O
	}
	task view(type: jme3_ext_assettools.ViewModelTask) {
		assetDirs = {convertToJ3O.outDir}
		//file = {convert.outputs.files.filter({it.getName().endsWith(".j3o")}).getSingleFile()}
		rpath = {"Models/${modelName}.j3o"}
	}

	task pack(type: Jar) {
		includeEmptyDirs = false
		from convertToJ3O
		from (unarchiveDir) {
			include('**/copyright*', '**/license*', '**/COPY*', '**/LICENSE*')
			eachFile { FileCopyDetails fcp ->
      	fcp.relativePath = new RelativePath(true, fcp.relativePath.segments[-1])
    	}
		}
	}

  // Define a task
  task show << {
    println 'project:    ' + project.path
    println 'modelName:  ' + modelName
		println 'archivePath:' + archivePath
  }

  //unarchive.mustRunAfter{'downloadFile'}
	convertToJ3O.mustRunAfter(convertToDDS)
	convert.mustRunAfter(unarchive)
	view.mustRunAfter(convert)
	pack.mustRunAfter(view)

	def pomConfig = {
		licenses {
			license {
				name "Attribution"
				url "http://creativecommons.org/licenses/by/2.0/"
				distribution "repo"
			}
		}
	}

	publishing {
		publications {
			jme3Stuff(MavenPublication) {
				artifact pack
				pom.withXml {
					def root = asNode()
					//root.appendNode('description', description)
					root.children().last() + pomConfig
				}
			}
		}
	}

	bintray {
		user = bintray_user
		key = bintray_api_key

		publications = ['jme3Stuff'] //When uploading Maven-based publication files
		//dryRun = true //Whether to run this as dry-run, without deploying
		publish = true //If version should be auto published after an upload
		pkg {
			repo = 'jme3stuff'
			name = project.name
			//desc =
		  //websiteUrl =
			//issueTrackerUrl = "https://github.com/davidB/jme3_ext_assettools/issues"
			//vcsUrl = "https://github.com/davidB/jme3_ext_assettools.git"
			licenses = ['Attribution']
			labels = ['jme3', 'assets', 'model_3D']
			publicDownloadNumbers = true
			version {
				name = project.version
				vcsTag = project.version
				//desc = 'titi 55' + description
				//attributes = [] //Optional version-level attributes
				//gpg {
				//	sign = true //Determines whether to GPG sign the files. The default is false
				//	passphrase = 'optional, the passphrase for GPG signing'
				//}
			}
		}
	}
}

// Inject special case configuration into a particular project
// project(':teapot') {
// 	bintray.pkg {
// 		desc = '''Martin Newell modeled a teapot using bicubic Bezier patches in 1975 as part of an entire tea set. It first appeared in his Ph.D. dissertation. Jim Blinn scaled the teapot horizontally by 1.3x to cancel the effect of the rectangular pixels on their display. The original had no bottom; most variations add one. Kenzie Lamar at Vicarious Visions created this version from the default teapot model in 3D Studio Max. He resized the top so that it fits snugly, created a shell and welded the spout and handle so that the teapot is a manifold without boundary, and created a unique and consistent-resolution texture parameterization for the entire model.'''
// 		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
// 	}
// 	ext.archivePath = "${buildDir}/teapot.zip"
// 	//ext.modelPathInArchive = "teapot.obj"
// 	ext.modelScale = 0.01
// 	task downloadFile(type: de.undercouch.gradle.tasks.download.Download) {
// 		src 'http://graphics.cs.williams.edu/data/meshes/teapot.zip'
// 		dest buildDir
// 	}
// task prepare {
// 		dependsOn('downloadFile', 'unarchive','convert', 'view','pack')
// }
// }

// project(':teapot') {
// 	bintray.pkg {
// 		desc = '''Martin Newell modeled a teapot using bicubic Bezier patches in 1975 as part of an entire tea set. It first appeared in his Ph.D. dissertation. Jim Blinn scaled the teapot horizontally by 1.3x to cancel the effect of the rectangular pixels on their display. The original had no bottom; most variations add one. Kenzie Lamar at Vicarious Visions created this version from the default teapot model in 3D Studio Max. He resized the top so that it fits snugly, created a shell and welded the spout and handle so that the teapot is a manifold without boundary, and created a unique and consistent-resolution texture parameterization for the entire model.'''
// 		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
// 	}
//  // teapot.blend made by hand from the .obj
// 	ext.modelPathInArchive = "teapot.blend"
// 	task copyBlend(type: Copy) {
// 		from "${projectDir}/teapot.blend"
// 		into {unarchiveDir}
// 	}
// 	task prepare  {
// 		dependsOn('copyBlend','convert', 'view','pack')
// 	}
// }

project(':teapot') {
	version = "0.2.0"
	bintray.pkg {
		desc = '''Martin Newell modeled a teapot using bicubic Bezier patches in 1975 as part of an entire tea set. It first appeared in his Ph.D. dissertation. Jim Blinn scaled the teapot horizontally by 1.3x to cancel the effect of the rectangular pixels on their display. The original had no bottom; most variations add one. Kenzie Lamar at Vicarious Visions created this version from the default teapot model in 3D Studio Max. He resized the top so that it fits snugly, created a shell and welded the spout and handle so that the teapot is a manifold without boundary, and created a unique and consistent-resolution texture parameterization for the entire model.'''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
		labels = ['jme3', 'assets', 'model_3D', 'testdata']
	}
	ext.modelPathInAssetCP = "Models/Teapot/Teapot.obj"
  dependencies {
		assets "com.jme3:jme3-testdata:3.1.0-snapshot-github"
	}
	task prepare {
		dependsOn('convert', 'view','pack')
	}
}

project(':crytek_sponza') {
	bintray.pkg {
		desc = '''The Atrium Sponza Palace in Dubrovnik, re-modeled by Frank Meinl at Crytek with inspiration from Marko Dabrovic's original.'''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
	}
	ext.modelPathInArchive = "crytek-sponza/sponza.obj"
  ext.modelScale = 0.01

	task downloadFile(type: de.undercouch.gradle.tasks.download.Download) {
		src 'http://graphics.cs.williams.edu/data/meshes/crytek-sponza.zip'
		dest buildDir
	}
	task prepare {
		dependsOn('downloadFile', 'unarchive','convert', 'view','pack')
	}
}

project(':crytek_sponza2') {
	// version adapted by Arthur
	bintray.pkg {
		desc = '''The Atrium Sponza Palace in Dubrovnik, re-modeled by Frank Meinl at Crytek with inspiration from Marko Dabrovic's original.'''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
	}
	//ext.archivePath = "${System.properties['user.home']}/Téléchargements/sponza.zip"
	ext.archivePath = "tmp/sponza2.zip"
	ext.modelPathInArchive = "crytek/sponza.obj"
	ext.modelScale = 0.01
	task prepare {
		dependsOn('unarchive','convert', 'view','pack')
	}
}

project(':dabrovic_sponza'){
	bintray.pkg {
		desc = ''' '''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
	}
	ext.archivePath = "${buildDir}/dabrovic-sponza.zip"
	ext.modelPathInArchive = "sponza.obj"
	//ext.modelScale = 0.1
	task downloadFile(type: de.undercouch.gradle.tasks.download.Download) {
		src 'http://graphics.cs.williams.edu/data/meshes/dabrovic-sponza.zip'
		dest buildDir
	}
	task prepare {
		dependsOn('downloadFile', 'unarchive','convert', 'view','pack')
	}
}

project(':lost_empire'){
	bintray.pkg {
		desc = ''' '''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
	}
	ext.archivePath = "${buildDir}/lost-empire.zip"
	ext.modelPathInArchive = "lost_empire.obj"
	ext.modelScale = 0.1
	task downloadFile(type: de.undercouch.gradle.tasks.download.Download) {
		src 'http://graphics.cs.williams.edu/data/meshes/lost-empire.zip'
		dest buildDir
	}
	task prepare {
		dependsOn('downloadFile', 'unarchive','convert', 'view','pack')
	}
}

project(':buddha'){
	bintray.pkg {
		desc = ''' '''
		websiteUrl = 'http://graphics.cs.williams.edu/data/meshes.xml'
	}
	ext.archivePath = "${buildDir}/buddha.zip"
	ext.modelPathInArchive = "buddha.obj"
	//ext.modelScale = 0.1
	task downloadFile(type: de.undercouch.gradle.tasks.download.Download) {
		src 'http://graphics.cs.williams.edu/data/meshes/buddha.zip'
		dest buildDir
	}
	task prepare {
		dependsOn('downloadFile', 'unarchive','convert', 'view','pack')
	}
}
